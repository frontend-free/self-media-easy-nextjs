// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Platform {
  // 抖音
  TIKTOK
  // 视频号
  WEIXIN_VIDEO
}

enum AccountStatus {
  // 未授权
  UNAUTHED
  // 已授权
  AUTHED
  // 已失效
  INVALID
}

enum PublishResourceType {
  // 视频
  VIDEO
}

enum PublishType {
  // 正式
  OFFICIAL
  // 草稿
  DRAFT
}

enum TaskStatus {
  // 等待发布
  PENDING
  // 发布中
  PUBLISHING
  // 发布成功
  SUCCESS
  // 发布失败
  FAILED
  // 已取消
  CANCELLED
}

// 用户模型
model User {
  id       String  @id @default(uuid())
  name     String  @unique
  password String
  avatar   String?
  mobile   String?
  nickname String?
  isAdmin  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  tagCoachList TagCoach[]
  Account      Account[]
  publishes    Publish[]
  tasks        Task[]
  autoPublishSetting AutoPublishSetting[]
}

// 标签-教练
model TagCoach {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  userId  String
  user    User      @relation(fields: [userId], references: [id])
  account Account[]
}

// 账号
model Account {
  id             String         @id @default(uuid())
  platform       Platform // 平台
  platformName   String? // 平台名称
  platformAvatar String? // 平台头像
  platformId     String? // 平台ID
  authInfo       String? // 授权信息
  status         AccountStatus? @default(UNAUTHED) // 账号状态
  authedAt       DateTime // 授权时间
  logs           String? // 授权日志 JSON

  tagCoachId String?
  tagCoach   TagCoach? @relation(fields: [tagCoachId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])
  tasks  Task[]
  publishes Publish[]

  autoPublishSettingId String?
  autoPublishSetting AutoPublishSetting? @relation(fields: [autoPublishSettingId], references: [id])
}

// 发布
model Publish {
  id              String              @id @default(uuid())
  resourceType    PublishResourceType // 资源类型
  resourceOfVideo String? // 视频资源
  title           String? // 标题
  description     String? // 描述
  publishType     PublishType // 发布类型

  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])
  tasks Task[] // 任务
}

// 任务
model Task {
  id      String     @id @default(uuid())
  status  TaskStatus @default(PENDING) // 任务状态
  logs    String? // 任务日志 JSON
  startAt DateTime? // 开始发布时间
  endAt   DateTime? // 结束发布时间

  accountId String
  account   Account @relation(fields: [accountId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  publishId String
  publish   Publish @relation(fields: [publishId], references: [id])
}

// 自动发布设置
model AutoPublishSetting {
  id String @id // 使用 userId 作为主键

  enabled Boolean @default(false) // 是否启用
  resourceVideoDir String? // 视频资源目录
  title String? // 标题
  accounts Account[]
  lastRunAt DateTime? // 上次运行时间

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [id], references: [id])
}
